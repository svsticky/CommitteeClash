using Commissiestrijd.Data;
using Commissiestrijd.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace Commissiestrijd.Controllers;

/// <summary>
/// Controller for handling leaderboard operations.
/// This controller allows users to retrieve the leaderboard based on submitted tasks within a specified date range.
/// It checks if the user is authorized before allowing access to the leaderboard.
/// The leaderboard is generated by summing the points of approved tasks grouped by committee.
/// </summary>
[Authorize]
[ApiController]
[Route("[controller]")]
public class LeaderboardController : Controller
{
    private readonly AppDbContext _context;

    private readonly ILogger<LeaderboardController> _logger;

    /// <summary>
    /// Constructor for the LeaderboardController.
    /// Initializes the controller with the provided database context and logger.
    /// This constructor is used to set up the necessary dependencies for the controller,
    /// allowing it to access submitted task data and log information or errors during operations.
    /// </summary>
    /// <param name="context">
    /// The database context used to access the application's data.
    /// </param>
    /// <param name="logger">
    /// The logger used for logging information or errors during operations.
    /// </param>
    public LeaderboardController(AppDbContext context, ILogger<LeaderboardController> logger)
    {
        _context = context;
        _logger = logger;
    }

    /// <summary>
    /// Retrieves the leaderboard based on submitted tasks within a specified date range.
    /// This method allows users to get the leaderboard by providing a start date and an end date
    /// for the period they want to analyze.
    /// The leaderboard is generated by summing the points of approved tasks grouped by committee,
    /// and ordered by points in descending order.
    /// The method validates the date range to ensure the start date is not after the end date
    /// and that the dates are treated as UTC dates.
    /// If the date range is valid, it retrieves all approved tasks within that range,
    /// filters out tasks that exceed the MaxPerPeriod limit,
    /// and then groups the tasks by committee to calculate the total points for each committee.
    /// </summary>
    /// <param name="StartDate">
    /// The start date of the period for which to retrieve the leaderboard.
    /// </param>
    /// <param name="EndDate">
    /// The end date of the period for which to retrieve the leaderboard.
    /// </param>
    /// <returns>
    /// An IActionResult containing the leaderboard data or a BadRequest result if the date range is
    /// invalid.
    /// </returns>
    /// <response code="200">
    /// Returns the leaderboard data as a list of anonymous objects containing committee names and their total points
    /// within the specified date range.
    /// </response>
    /// <response code="400">
    /// If the start date is after the end date, a BadRequest result is returned with an error message.
    /// </response>
    /// <response code="500">
    /// If an error occurs while processing the request, a 500 Internal Server Error result is
    /// returned.
    /// </response> 
    [HttpGet("GetLeaderboard")]
    public IActionResult GetLeaderboard([FromQuery] DateTime StartDate, [FromQuery] DateTime EndDate)
    {
        _logger.LogInformation("GetLeaderboard called with StartDate: {StartDate}, EndDate: {EndDate}", StartDate, EndDate);

        // Validate date range as UTC dates
        DateTime UtcStartTime = DateTime.SpecifyKind(StartDate, DateTimeKind.Utc).Date;
        DateTime UtcEndTime = DateTime.SpecifyKind(EndDate, DateTimeKind.Utc).Date;

        // Check if start date is not after end date
        if (UtcStartTime > UtcEndTime)
        {
            _logger.LogWarning("Start date {StartDate} is after end date {EndDate}.", UtcStartTime, UtcEndTime);
            return BadRequest("Start date cannot be after end date.");
        }

        // Get all approved tasks within the specified date range
        var allTasksInPeriod = _context.SubmittedTasks
            .Where(t => t.Status == SubmittedTask.TaskStatus.Approved &&
                        t.SubmittedAt.Date >= UtcStartTime &&
                        t.SubmittedAt.Date <= UtcEndTime)
            .OrderBy(t => t.SubmittedAt)
            .ToList();

        // Filter tasks that exceed the MaxPerPeriod limit
        var validTasks = new List<SubmittedTask>();
        foreach (var task in allTasksInPeriod)
        {
            // If MaxPerPeriod is null, it means no limit, so we can add the task
            if (task.MaxPerPeriod == null)
            {
                validTasks.Add(task);
            }
            else
            {
                // Else, count how many tasks with the same ID are already submitted before this one
                // If the count is less than MaxPerPeriod, we can add the task
                // Else, it exceeds the limit and we skip it
                int countBefore = validTasks
                    .Count(t => t.PossibleTaskId == task.PossibleTaskId);

                if (countBefore < task.MaxPerPeriod)
                {
                    validTasks.Add(task);
                }
            }
        }

        // Group by committee and sum points, then order by points descending
        var leaderboard = validTasks
            .GroupBy(t => t.Committee)
            .Select(g => new
            {
                Committee = g.Key,
                Points = g.Sum(t => t.Points)
            })
            .OrderByDescending(x => x.Points)
            .ToList();

        _logger.LogInformation("Leaderboard generated with {Count} committees.", leaderboard.Count);

        return Ok(leaderboard);
    }
}
