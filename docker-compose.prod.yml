networks:
  prod_network:
    name: prod_network
    driver: bridge

services:
  # Production database with persistent volume
  database:
    user: root
    privileged: true
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres} # Use env var with fallback
      - POSTGRES_DB=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistent volume
    networks:
      - prod_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "5"

  # Production backend
  backend:
    user: root
    privileged: true
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production # Use production target
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - CONNECTION_STRING=Host=database;Port=5432;Username=postgres;Password=${POSTGRES_PASSWORD:-postgres};Database=postgres;
      - HOST_URL=${HOST_URL:-http://localhost:3000}
      - OAUTH_PROVIDER_URL=${OAUTH_PROVIDER_URL:-https://koala.svsticky.nl/}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - prod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:8080/status"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "5"

  # Production frontend
  frontend:
    user: root
    privileged: true
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production # Use production target
      args:
        NEXT_PUBLIC_OAUTH_PROVIDER_URL: ${OAUTH_PROVIDER_URL:-https://koala.svsticky.nl/}
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_OAUTH_PROVIDER_URL=${OAUTH_PROVIDER_URL:-https://koala.svsticky.nl/}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - prod_network
    restart: unless-stopped
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "5"

  docs:
    build:
      context: ./docs
      dockerfile: Dockerfile
      target: production # Use production target
    ports:
      - "${DOCS_PORT:-3001}:3001"
    environment:
      - API_URL=http://backend:8080
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - prod_network
    restart: unless-stopped
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "5"

volumes:
  postgres_data: # Persistent volume for database
